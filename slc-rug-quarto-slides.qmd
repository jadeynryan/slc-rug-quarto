---
title: "Reproducible reports and presentations with Quarto<br>![](images/jr-logo-quarto.webp){width=5em}"
author: "Jadey Ryan // July 1, 2024<br>Salt Lake City R Users Group"
execute: 
  echo: true
format:
  revealjs:
    footer: "[jadeyryan.quarto.pub/slc-rug-quarto/](https://jadeyryan.quarto.pub/slc-rug-quarto/)"
    logo: "images/jr-logo-quarto.webp"
    logo-alt: "Jadey Ryan's cat hex logo joined by a heart with the Quarto hex sticker."
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    incremental: true
    slide-number: true
revealjs-plugins:
  - pointer
---

## Jadey Ryan

::: columns
::: {.column width="44%"}
Data scientist at WA Dept of Agriculture

The Coding Cats: cat & code themed merch

{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)

{{< fa brands mastodon size=xl >}} [\@jadeynryan](https://fosstodon.org/@jadeynryan)

{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)

{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)

{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)

![](images/mts.webp){fig-alt="Three snowshoe siamese cats in loaf mode. From left to right: Tai, Mai, and Skye" style="border-radius:1em;margin-top:auto"}
:::

::: {.column width="28%"}
![](images/bulk-density.jpg){fig-alt="Jadey collecting a bulk density soil sample in a field of wheat stubble." style="border-radius:1em;margin-top:auto"}
:::

::: {.column width="28%"}
::: {layout-nrow="2"}
![](images/soil-sampling.jpg){style="border-radius:1em;margin-top:auto"
fig-alt="Jadey standing in a field of wheat stubble holding a 3 foot long soil sampling probe over her shoulder."}

![](images/rangeland.jpg){fig-alt="Jadey standing in a grazed wildflower meadow with two colleagues collecting soil samples."
style="border-radius:1em;margin-top:auto"}
:::

{{< fa camera title="Photo credit" >}} [@leslie.mmichel](https://twitter.com/leslie_mmichel)
:::
:::

## Reproducibility

- Data and style updates are inevitable

- Manual updates are time-consuming and error-prone

## Manual updates ‚ùå

![](images/manual-update.svg){fig-alt="Illustration of a non-reproducible workflow for creating reports and presentations, highlighting the inefficiencies and error-prone nature of the copy/paste process." fig-align="center"}

## Updates with Quarto ‚úÖ

![](images/updates-with-quarto.svg){fig-alt="Illustration of a reproducible workflow for creating reports and presentations with R and Quarto, showcasing the streamlined and efficient process." fig-align="center"}

# What is Quarto? {.section}

## Publishing system that supports multiple languages & outputs

::: r-stack
![Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison Horst.](images/horst-quarto-schematic.png){.fragment .fade-out fragment-index="1" fig-alt="A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto." fig-align="center" style="margin-top:-1em;margin-bottom:-1em"}

![](images/horst-qmd-render-schema.png){.fragment fragment-index="1" fig-alt="A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document." fig-align="center" style="margin-top:-1em;margin-bottom:-1em"}
:::

## Create all kinds of outputs

::: {.nonincremental}

-   [Articles & **reports**](https://quarto.org/docs/output-formats/all-formats.html)
-   [Manuscripts](https://quarto.org/docs/manuscripts/)
-   [**Presentations**](https://quarto.org/docs/presentations/)
-   [Dashboards](https://quarto.org/docs/dashboards/)
-   [Websites](https://quarto.org/docs/websites/)
-   [Books](https://quarto.org/docs/books/)
-   [Interactive docs](https://quarto.org/docs/interactive/)

Get inspired by the [Quarto.org gallery](https://quarto.org/docs/gallery/){preview-link="true"} and the [Qmd Club website & blog showcase](https://qmdclub.com/){preview-link="true"}

:::

# Anatomy of a `.qmd` file {.section}

1. YAML header (metadata and document options)

2. Narrative (markdown)

3. Code chunks (import, wrangle, visualize data)

## 1. YAML header

"Yet Another Markup Language" or "YAML Ain't Markup Language"

``` {.yaml}
---                           # <1>
title: Quarto demo            # <2>
author: Jadey Ryan            # <2>
date: 2024-07-01              # <2>
format:                       # <2>
  html:                       # <3>
    theme: flatly             # <3>
    toc: true                 # <3>
---                           # <1>
```

1. Demarcated by three dashes (`---`) on the top and bottom

2. Document level metadata and options using key-value pairs in the format `key: value`

3. Add 2 spaces for each indentation level -- YAML is very fussy!

\

. . .

See available options in the **reference guides**: [HTML](https://quarto.org/docs/reference/formats/html.html), [PDF](https://quarto.org/docs/reference/formats/pdf.html), [MS Word](https://quarto.org/docs/reference/formats/docx.html), [Revealjs](https://quarto.org/docs/reference/formats/presentations/revealjs.html), [MS Powerpoint](https://quarto.org/docs/reference/formats/presentations/pptx.html).

## 2. Narrative

Markdown syntax for:

-   Text with formatting: `**bold**` &rarr; **bold**

-   Section headers: `# Header 1`, `# Header 2`

-   Hyperlinks: `[google.com](https://google.com)` &rarr; [google.com](https://google.com)

-   Images: `![](image.png)`

-   Inline code: ``` `{{r}} Sys.Date()` ``` &rarr; ```r Sys.Date()```

-   Inline math: ``` `$E = mc^{2}$` ``` &rarr; $E = mc^{2}$

\

. . .

[**Guide to markdown syntax**](https://quarto.org/docs/authoring/markdown-basics.html){preview-link="true"}

## 3. Code chunks (or cells or blocks)

**Three ways to insert code chunks:**

1.    Keyboard shortcut `Cmd`/`Ctrl` + `Option`/`Alt` + `I`.

2.    ![](images/rstudio-insert-chunk.png){fig-alt="Insert Chunk button in RStudio" style="vertical-align:middle;" width="49"} **Insert Chunk** button in the editor toolbar.

3.    Manually type the chunk delimiters ```` ```{r} ```` and ```` ``` ````.

. . .

**Two ways to run code chunks:**

1.    Use the **Run Current Chunk** or **Run All Chunks Above** buttons.

      ![](images/rstudio-code-chunk.png){fig-alt="Code chunk in RStudio with the Run All Chunks Above and Run Current Chunk buttons highlighted and labelled."}

2.    Run the current code chunk with `Cmd`/`Ctrl` + `Shift` + `Enter`.


# üíÉüèª Demo {.demo}

[`1-html-demo.qmd` ](https://github.com/jadeynryan/slc-rug-quarto/blob/main/demos/1-html-demo.qmd)

# Primer on parameters {.section}

## Like a custom function

::: r-stack
![](images/template1.png){.fragment
fig-alt="File with the word '.qmd' inside and the word 'Function' above."
width="1300" fig-align="left" style="margin-top:-1em"}

![](images/template2.png){.fragment
fig-alt="An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file."
width="1300" fig-align="left" style="margin-top:-1em"}

![](images/template3.png){.fragment
fig-alt="In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart."
width="1300" fig-align="left" style="margin-top:-1em"}
:::

## What makes a document "parameterized"?

-   YAML header with `params` key-value pairs

-   Use these `params` to create different variations of a report from a single `.qmd` document.

. . .

::: callout-important
-   Valid parameter values are strings, numbers, or Boolean.

-   Must serialize a dataframe to pass it as a parameter, then un-serialize it
    back to a dataframe within the `.qmd` content.

-   See [Christophe Dervieux's answer in Posit
    Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9)
    to understand why.

-   See [John Paul Helveston's blog
    post](https://www.jhelvy.com/blog/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters)
    to learn how to use {jsonlite} as a workaround.
:::

## Set `params` in YAML header

```{.yaml code-line-numbers="|2|3,4,6|5|7-8|11"}
---
title: "Swiss Cats"             # Metadata
format:                         # Set format types
  html:
    toc: true                   # Set additional options
  docx: default                           
params:                         # Set default parameter key-value pairs
  fave_breed: "Snowshoe"                                
---
    
Report content goes here.       # Write narrative and code
```

. . .

::: callout-important
Your default `params` key-value pairs must be found in your dataset. Otherwise, code will error or output will be blank.

The variable name for `params` can be anything you choose. Often, it's a column name in your dataset.
:::

## Access `params`

```{r}
#| include: false

# Set params for slide
params <- list(
  fave_breed = "Snowshoe"
)
```

Run any line or chunk to add `params` to your environment.

. . .

`params` object is a list.

```{r}
str(params)
```

\

. . .

Access with `$` notation.

```{r}
params$fave_breed
```

\

. . .

For inline code in YAML or report content, enclose the expression in `` `r ` ``.

```markdown
My favorite cat breed is the **``r I("r params$fave_breed")``**.
```

My favorite cat breed is the **`r params$fave_breed`**.

## Replace hard-coded values with `params`

`Cmd`/`Ctrl` + `F` to find where to replace hard-coded values with `params`.

![](images/find-replace-hard-coded-values.png){fig-alt="Find and replace toolbar with &quot;pet_type in the Search field highlighted by a purple box and &quot;params$pet_type in the Replace field highlighted by a blue box. The .qmd file shows a filter statement with the &quot;pet_type highlighted by RStudio as a match for the Find tool. This filter statement is highlighted by a purple box with an arrow pointing to a blue box that has the filter statement with the hard-coded &quot;cats string replaced with &quot;params$pet_type."}

## Replace hard-coded values with `params`

**Use `$` list notation in code** for plot/table titles and labels, filtering, etc.

\

`paste()` syntax:

```{r}
#| eval: false

# ggplot2 code +
    labs(title = paste(params$fave_breed, "population"))
```

. . .

\

`glue::glue()` syntax:

```{r}
#| eval: false

# ggplot2 code +
    labs(title = glue::glue("{params$fave_breed} population"))
```

\

. . .

**Use inline R code** for markdown.

```markdown
## My favorite breed: **``r I("r params$fave_breed")``**.
```

##

![](images/snowshoe-graph.png){fig-align="center"}

## Three ways to render

1. **RStudio/Quarto integration**:

    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt="Quarto render button in RStudio" style="vertical-align:middle;" width="49"} **Render** button in RStudio or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut

2. ‚ú® **Quarto R package** ‚ú®

    ```{.r filename="Console or R script"}
    quarto::quarto_render(
      input = here::here("template.qmd"),   # Input Quarto file
      execute_params = list(                # Named list of params
        pet_type = "cats",
        fave_breed = "Snowshoe"))
    ```

3. **Quarto CLI**

    ```{.bash filename="Terminal"}
    quarto render template.qmd -P pet_type:'cats' -P fave_breed:'Snowshoe'
    ```

. . .

::: callout-tip

Learn how to programmatically render all reports at once from my [previous workshops on parameterized reporting](https://github.com/jadeynryan/parameterized-quarto-workshop?tab=readme-ov-file#workshops).

:::

# üíÉüèª Demo {.demo}

[`2-params-demo.qmd`](https://github.com/jadeynryan/slc-rug-quarto/blob/main/demos/2-params-demo.qmd)

# Multiple report formats from a single `.qmd` {.section}

## Add formats & options to the YAML

``` {.yaml}
---
format:
  html: 
    embed-resources: true   # Makes the report self-contained
  pdf: default              # If not using any additional format options,
  docx: default             # set value to `default`  
---
```

. . .

::: callout-tip

## Render button dropdown

![](images/render-button.png){width=60% fig-alt="Screenshot of Quarto file with the Render dropdown showing options for HTML, PDF, and MS Word formats."}

[Quarto docs on multiple formats](https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats)
:::

## Format links for HTML output

Links to download the other formats will automatically appear in HTML documents.

![](images/other-formats.png){fig-alt="Screenshot of a HTML page that includes links to the PDF and MS Word formats in the table of contents under the heading Other Formats." style="border-radius:1em"}

## Format link options

**Choose which format links to include:**

```{yaml}
#| code-line-numbers: "7"
---
format:
  html: 
    embed-resources: true
  pdf: default
  docx: default
format-links: [pdf, docx]
---
```

. . .

**Or hide all links:**

```{yaml}
#| code-line-numbers: "7"
---
format:
  html: 
    embed-resources: true
  pdf: default
  docx: default
format-links: false
---
```

# Report &rarr; presentation {.section}

## Presentation formats & basics

-   `revealjs` --- [reveal.js](https://quarto.org/docs/presentations/revealjs/) (HTML)

-   `pptx` --- [PowerPoint](https://quarto.org/docs/presentations/powerpoint.html) (MS Office)

-   `beamer` --- [Beamer](https://quarto.org/docs/presentations/beamer.html) (LaTeX/PDF)

\

-   **Create a new section** with a level 1 heading (`#`)

-   **Create a new slide** with a level 2 heading (`##`) or a horizontal rule (`---`)

\

-   Put speaker notes in a `{.notes}` div: 

    ```markdown
    ::: {.notes}
    Notes show in speaker view. 
    Press the S key to enter speaker view when presenting Revealjs slides.
    :::
    ```
    
## Incremental number & bullet lists

-   Make **all** lists incremental by setting the option in the YAML:
    
    ```yaml
    format:
      revealjs:
        incremental: true
    ```
    
-   Make **some** lists incremental by wrapping it in a div:
    
    ```
    ::: {.incremental}
    - Snowshoe
    - cats
    - are
    - so
    - cute!
    :::
    ```

-   Make **some** lists **non**-incremental by wrapping it in a div:
    
    ```
    ::: {.nonincremental}
    - I have 3 snowshoe cats:
      - Mai
      - Tai
      - Skye
    :::
    ```

## Revealjs has the most options

YAML for these slides:

```yaml
format:
  revealjs:
    footer: "[jadeyryan.quarto.pub/slc-rug-quarto/](https://jadeyryan.quarto.pub/slc-rug-quarto/)"
    logo: "images/jr-logo-quarto.webp"
    logo-alt: "Jadey Ryan's cat hex logo joined by a heart with the Quarto hex sticker."
    width: 1600
    height: 900
    theme: slides.scss
    highlight-style: a11y
    transition: fade
    incremental: true
    slide-number: true
revealjs-plugins:
  - pointer
```

See all the YAML options in the  [Revealjs reference guide](https://quarto.org/docs/reference/formats/presentations/revealjs.html).

Check out [Revealjs plugins](https://quarto.org/docs/extensions/revealjs.html) like [Pointer](https://github.com/quarto-ext/pointer).

## and the coolest features

Code line-highlighting:

```{r}
#| echo: fenced
#| output-location: column
#| code-line-numbers: "|3|5|8|10"

library(ggplot2)

mtcars |> 
  ggplot(aes(x = disp, y = mpg)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

Explore more features in the [Revealjs Quarto docs](https://quarto.org/docs/presentations/revealjs/)

::: footer
Slide from Tom Mock's [Getting Started with Quarto Presentations](https://rstudio-conf-2022.github.io/get-started-quarto/materials/05-presentations.html) workshop
:::

## YAML options for HTML reports & Revealjs presentations

```yaml
format: 
  html: 
    output-file: report.html # <1>
    theme: solar             # <2>   
  revealjs:
    output-file: slides.html # <1>
    theme: moon              # <2> 
embed-resources: true        # <3>
```

1. Use `output-file` to specify file name. Otherwise, they overwrite each other (e.g., `template.qmd` &rarr; `template.html`).

2. Use similar `themes` for styling consistency across publications.

3. Use `embed-resources: true` to bundle all files into the output. Specify this option at the root level to apply to all formats.

# üíÉüèª Demo {.demo}

[`3-html-revealjs-demo.qmd`](https://github.com/jadeynryan/slc-rug-quarto/blob/main/demos/3-html-revealjs-demo.qmd)

# Styling with HTML and CSS {.section}

## HTML format uses Bootswatch themes

Choose from or customize one of 25 [Bootswatch](https://bootswatch.com/){preview-link="true"} themes.

\

. . .

**Set the theme** in the YAML under the `html` key:

``` yaml
format:
  html:
    theme: solar
```

\

. . .

**Customize a theme** by including a custom `.scss` file under the `theme` key:

``` yaml
format:
  html:
    theme: [solar, theme.scss]
```

\

[HTML theming Quarto docs](https://quarto.org/docs/output-formats/html-themes.html)

## Revealjs has its own themes

Preview themes at [revealjs.com/themes](https://revealjs.com/themes/){preview-link="true"}.

\

**Set the theme** in the YAML under the `revealjs` key:

``` yaml
format:
  revealjs:
    theme: moon
```

\

. . .

**Customize a theme** by including a custom `.scss` file under the `theme` key:

``` yaml
format:
  revealjs:
    theme: [moon, theme.scss]
```

\

[Revealjs theming Quarto docs](https://quarto.org/docs/presentations/revealjs/themes.html)

## SCSS files

SCSS files have the following form:

``` scss
/*-- scss:defaults --*/
$h2-font-size:          1.6rem !default;
$headings-font-weight:  500 !default;
$body-color:            $gray-700 !default;

/*-- scss:rules --*/
h1, h2, h3, h4, h5, h6 {
  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);
}
```

\

Define [**SASS variables**](https://quarto.org/docs/output-formats/html-themes.html#sass-variables) in the `defaults` section.

Declare [**CSS rules**](https://www.w3schools.com/css/css_syntax.ASP) in the `rules` section.

\

[Bootstrap docs](https://getbootstrap.com/docs/5.1/customize/sass/)

[Default Bootstrap variables](https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss)

## Browser developer tools

`Cmd`/`Ctrl` + `Shift` + `C` in Google Chrome or Microsoft Edge then hover over the element to inspect.

::: r-stack
![](images/browser-tools.png){.fragment
fig-alt="Screenshot of browser developer tools inspecting the Quarto title meta heading of an HTML report."
width="1300" fig-align="left"}

![](images/browser-tools-modified.png){.fragment
fig-alt="Screenshot of browser developer tools with the CSS declaration modified to test style changes."
width="1300" fig-align="left"}
:::

# Styling in Microsoft Office {.section}

## Reference document

Create and modify a *reference document*, which is a special kind of template for `.docx` or `.pptx`.

::: {.panel-tabset .nonincremental}

## Word

1. Run the following in the Terminal to create the reference doc:

    ```{.bash filename="Terminal"}
    quarto pandoc -o template.docx --print-default-data-file reference.docx
    ```

2. Open `template.docx` and modify the styles.

3. Set this template in the YAML under the `reference-doc:` key:

    ```yaml
    format:
      docx:
        reference-doc: template.docx
    ```

[MS Word template Quarto docs](https://quarto.org/docs/output-formats/ms-word-templates.html)

## Powerpoint

1. Run the following in the Terminal to create the reference doc:

    ```{.bash filename="Terminal"}
    quarto pandoc -o template.pptx --print-default-data-file reference.pptx
    ```

2. Open `template.pptx` and modify the styles.

3. Set this template in the YAML under the `reference-doc:` key:

    ```yaml
    format:
      pptx:
        reference-doc: template.pptx
    ```

[MS Powerpoint template Quarto docs](https://quarto.org/docs/presentations/powerpoint.html#creating-a-template)

:::

[MS documentation on modifying styles](https://support.microsoft.com/en-us/office/customize-or-create-new-styles-d38d6e47-f6fc-48eb-a607-1eb120dec563)

# Wrap-up {.section}

## More advanced features

- [Conditional content](https://quarto.org/docs/authoring/conditional.html)

- [Conditional code](https://quarto.org/docs/computations/r.html#chunk-options)

- [`{{< include >}}` shortcode](https://quarto.org/docs/authoring/includes.html) for reusing content without copying/pasting

- See [slides from my recent Intermediate Quarto workshop](https://jadeyryan.quarto.pub/cascadia-quarto/4-conditionals/) for details, example code snippets, and exercises

## Best practices

- [**KISS principle**](http://en.wikipedia.org/wiki/KISS_principle): keep it super simple

- Keep text minimal if rendering a report & presentation from the same `.qmd`, or use conditional content

- Careful with features that only work in certain formats (e.g., interactivity)

- Use the [Quarto docs](https://quarto.org/) as a **reference** & take advantage of the search feature

- Pick similar themes and use custom `.scss` files and reference documents to ensure consistent styling across all your documents

## Next steps

- Work through these slides and code snippets to try out these features

- Check out the linked references

- Be curious & explore the source code of reports & presentations you like

- Have fun creating amazing things!

. . .

::: callout-caution

Quarto is an extremely powerful tool with many, many features and capabilities. It's easy to get overwhelmed. Learn what you ***need*** and bookmark other things you'd like to learn ***later***.

:::

## Thank you!

::: columns
::: {.column width="65%"}
üè° **Home for slides**:

[jadeyryan.quarto.pub/slc-rug-quarto/](https://jadeyryan.quarto.pub/slc-rug-quarto/)

üë©üèª‚Äçüíª **Source code**:

[github.com/jadeynryan/slc-rug-quarto](https://github.com/jadeynryan/slc-rug-quarto)

üé• **Recordings from previous workshops & talks**:  
[links in GitHub repo](https://github.com/jadeynryan/parameterized-quarto-workshop?tab=readme-ov-file#workshops) or [my YouTube playlist](https://youtube.com/playlist?list=PLzjGoNexcyYaDUVCg4MQDtMXLl2F5HE3B&si=-y0jQfCYyRAQjI1B)

![](images/mts.jpg){width="600"
fig-alt="From left to right, Mai, Tai, and Skye. Three snowshoe cats cuddling in their warming beds."
style="border-radius:1em"}
:::

::: {.column width="35%"}
**Let's connect!**

{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)

{{< fa brands mastodon size=xl >}} [\@jadeynryan](https://fosstodon.org/@jadeynryan)

{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)

{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)

{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)
:::
:::